// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/elangreza14/lion-superindo/cmd/server/config"
	"github.com/elangreza14/lion-superindo/internal/handler"
	"github.com/elangreza14/lion-superindo/internal/postgresql"
	"github.com/elangreza14/lion-superindo/internal/redis"
	"github.com/elangreza14/lion-superindo/internal/service"
	"github.com/google/wire"
	redis2 "github.com/redis/go-redis/v9"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeProductHandler(cfg *config.Config) (*ProductHandlerDeps, error) {
	db, err := SetupDB(cfg)
	if err != nil {
		return nil, err
	}
	productRepo := postgresql.NewProductRepo(db)
	client, err := SetupCache(cfg)
	if err != nil {
		return nil, err
	}
	redisProductRepo := redis.NewProductRepo(client)
	productService := service.NewProductService(productRepo, redisProductRepo)
	productHandler := handler.NewProductHandler(productService)
	productHandlerDeps := &ProductHandlerDeps{
		Handler:     productHandler,
		DB:          db,
		RedisClient: client,
	}
	return productHandlerDeps, nil
}

// wire.go:

type ProductHandlerDeps struct {
	Handler     *handler.ProductHandler
	DB          *sql.DB
	RedisClient *redis2.Client
}

var productSet = wire.NewSet(
	SetupDB,
	SetupCache, postgresql.NewProductRepo, wire.Bind(new(service.DbRepo), new(*postgresql.ProductRepo)), redis.NewProductRepo, wire.Bind(new(service.CacheRepo), new(*redis.ProductRepo)), service.NewProductService, wire.Bind(new(handler.ProductService), new(*service.ProductService)), handler.NewProductHandler,
)

func SetupDB(cfg *config.Config) (*sql.DB, error) {
	connString := fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=%s",
		cfg.POSTGRES_USER,
		cfg.POSTGRES_PASSWORD,
		cfg.POSTGRES_HOSTNAME,
		cfg.POSTGRES_PORT,
		cfg.POSTGRES_DB,
		cfg.POSTGRES_SSL,
	)

	db, err := sql.Open("postgres", connString)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func SetupCache(cfg *config.Config) (*redis2.Client, error) {
	redisClient := redis2.NewClient(&redis2.Options{
		Addr: fmt.Sprintf("%s:%s", cfg.REDIS_HOSTNAME, cfg.REDIS_PORT),
	})

	err := redisClient.Ping(context.Background()).Err()
	if err != nil {
		return nil, err
	}

	return redisClient, nil
}
