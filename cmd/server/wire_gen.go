// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/elangreza14/lion-superindo/cmd/server/config"
	"github.com/elangreza14/lion-superindo/internal/handler"
	"github.com/elangreza14/lion-superindo/internal/postgresql"
	"github.com/elangreza14/lion-superindo/internal/redis"
	"github.com/elangreza14/lion-superindo/internal/service"
	"github.com/google/wire"
	redis2 "github.com/redis/go-redis/v9"
	"net/http"
)

import (
	_ "github.com/elangreza14/lion-superindo/docs"
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeProductHandler(cfg *config.Config) (*ProductHandlerDeps, error) {
	db, err := config.SetupDB(cfg)
	if err != nil {
		return nil, err
	}
	postgresRepo := postgresql.NewRepo(db)
	client, err := config.SetupCache(cfg)
	if err != nil {
		return nil, err
	}
	redisRepo := redis.NewRepo(client)
	productService := service.NewProductService(postgresRepo, redisRepo)
	productHandler := handler.NewProductHandler(productService)
	serveMux := handler.NewRoutes(productHandler)
	productHandlerDeps := &ProductHandlerDeps{
		Mux:         serveMux,
		DB:          db,
		RedisClient: client,
	}
	return productHandlerDeps, nil
}

// wire.go:

type ProductHandlerDeps struct {
	Mux         *http.ServeMux
	DB          *sql.DB
	RedisClient *redis2.Client
}

var productSet = wire.NewSet(config.SetupDB, config.SetupCache, postgresql.NewRepo, wire.Bind(new(service.DbRepo), new(*postgresql.PostgresRepo)), redis.NewRepo, wire.Bind(new(service.CacheRepo), new(*redis.RedisRepo)), service.NewProductService, wire.Bind(new(handler.ProductService), new(*service.ProductService)), handler.NewProductHandler, handler.NewRoutes)
