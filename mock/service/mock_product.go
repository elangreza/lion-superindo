// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source product.go -destination ../../mock/service/mock_product.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	domain "github.com/elangreza14/lion-superindo/internal/domain"
	params "github.com/elangreza14/lion-superindo/internal/params"
	gomock "go.uber.org/mock/gomock"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
	isgomock struct{}
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// CountProducts mocks base method.
func (m *MockDbRepo) CountProducts(ctx context.Context, req params.ListProductsQueryParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProducts", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProducts indicates an expected call of CountProducts.
func (mr *MockDbRepoMockRecorder) CountProducts(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProducts", reflect.TypeOf((*MockDbRepo)(nil).CountProducts), ctx, req)
}

// CreateProduct mocks base method.
func (m *MockDbRepo) CreateProduct(ctx context.Context, req params.CreateProductRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockDbRepoMockRecorder) CreateProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockDbRepo)(nil).CreateProduct), ctx, req)
}

// ListProducts mocks base method.
func (m *MockDbRepo) ListProducts(ctx context.Context, req params.ListProductsQueryParams) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, req)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockDbRepoMockRecorder) ListProducts(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockDbRepo)(nil).ListProducts), ctx, req)
}

// MockCacheRepo is a mock of CacheRepo interface.
type MockCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepoMockRecorder
	isgomock struct{}
}

// MockCacheRepoMockRecorder is the mock recorder for MockCacheRepo.
type MockCacheRepoMockRecorder struct {
	mock *MockCacheRepo
}

// NewMockCacheRepo creates a new mock instance.
func NewMockCacheRepo(ctrl *gomock.Controller) *MockCacheRepo {
	mock := &MockCacheRepo{ctrl: ctrl}
	mock.recorder = &MockCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepo) EXPECT() *MockCacheRepoMockRecorder {
	return m.recorder
}

// CacheProducts mocks base method.
func (m *MockCacheRepo) CacheProducts(ctx context.Context, req params.ListProductsQueryParams, CountProducts int, ListProducts []domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheProducts", ctx, req, CountProducts, ListProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheProducts indicates an expected call of CacheProducts.
func (mr *MockCacheRepoMockRecorder) CacheProducts(ctx, req, CountProducts, ListProducts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheProducts", reflect.TypeOf((*MockCacheRepo)(nil).CacheProducts), ctx, req, CountProducts, ListProducts)
}

// FlushAll mocks base method.
func (m *MockCacheRepo) FlushAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockCacheRepoMockRecorder) FlushAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockCacheRepo)(nil).FlushAll), ctx)
}

// GetCachedProductCount mocks base method.
func (m *MockCacheRepo) GetCachedProductCount(ctx context.Context, req params.ListProductsQueryParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedProductCount", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedProductCount indicates an expected call of GetCachedProductCount.
func (mr *MockCacheRepoMockRecorder) GetCachedProductCount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedProductCount", reflect.TypeOf((*MockCacheRepo)(nil).GetCachedProductCount), ctx, req)
}

// GetCachedProducts mocks base method.
func (m *MockCacheRepo) GetCachedProducts(ctx context.Context, req params.ListProductsQueryParams) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedProducts", ctx, req)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedProducts indicates an expected call of GetCachedProducts.
func (mr *MockCacheRepoMockRecorder) GetCachedProducts(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedProducts", reflect.TypeOf((*MockCacheRepo)(nil).GetCachedProducts), ctx, req)
}
