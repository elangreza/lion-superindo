// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source product.go -destination ../../mock/service/mock_product.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	domain "github.com/elangreza14/superindo/internal/domain"
	params "github.com/elangreza14/superindo/internal/params"
	gomock "go.uber.org/mock/gomock"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
	isgomock struct{}
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockDbRepo) CreateProduct(ctx context.Context, req params.CreateProductRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockDbRepoMockRecorder) CreateProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockDbRepo)(nil).CreateProduct), ctx, req)
}

// ListProduct mocks base method.
func (m *MockDbRepo) ListProduct(ctx context.Context, req params.ListProductQueryParams) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProduct", ctx, req)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProduct indicates an expected call of ListProduct.
func (mr *MockDbRepoMockRecorder) ListProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProduct", reflect.TypeOf((*MockDbRepo)(nil).ListProduct), ctx, req)
}

// TotalProduct mocks base method.
func (m *MockDbRepo) TotalProduct(ctx context.Context, req params.ListProductQueryParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalProduct", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalProduct indicates an expected call of TotalProduct.
func (mr *MockDbRepoMockRecorder) TotalProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalProduct", reflect.TypeOf((*MockDbRepo)(nil).TotalProduct), ctx, req)
}

// MockCacheRepo is a mock of CacheRepo interface.
type MockCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepoMockRecorder
	isgomock struct{}
}

// MockCacheRepoMockRecorder is the mock recorder for MockCacheRepo.
type MockCacheRepoMockRecorder struct {
	mock *MockCacheRepo
}

// NewMockCacheRepo creates a new mock instance.
func NewMockCacheRepo(ctrl *gomock.Controller) *MockCacheRepo {
	mock := &MockCacheRepo{ctrl: ctrl}
	mock.recorder = &MockCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepo) EXPECT() *MockCacheRepoMockRecorder {
	return m.recorder
}

// FlushAll mocks base method.
func (m *MockCacheRepo) FlushAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockCacheRepoMockRecorder) FlushAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockCacheRepo)(nil).FlushAll), ctx)
}

// GetProductData mocks base method.
func (m *MockCacheRepo) GetProductData(ctx context.Context, req params.ListProductQueryParams) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductData", ctx, req)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductData indicates an expected call of GetProductData.
func (mr *MockCacheRepoMockRecorder) GetProductData(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductData", reflect.TypeOf((*MockCacheRepo)(nil).GetProductData), ctx, req)
}

// GetProductTotal mocks base method.
func (m *MockCacheRepo) GetProductTotal(ctx context.Context, req params.ListProductQueryParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTotal", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductTotal indicates an expected call of GetProductTotal.
func (mr *MockCacheRepoMockRecorder) GetProductTotal(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTotal", reflect.TypeOf((*MockCacheRepo)(nil).GetProductTotal), ctx, req)
}

// SetProduct mocks base method.
func (m *MockCacheRepo) SetProduct(ctx context.Context, req params.ListProductQueryParams, totalProducts int, listProducts []domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProduct", ctx, req, totalProducts, listProducts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProduct indicates an expected call of SetProduct.
func (mr *MockCacheRepoMockRecorder) SetProduct(ctx, req, totalProducts, listProducts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProduct", reflect.TypeOf((*MockCacheRepo)(nil).SetProduct), ctx, req, totalProducts, listProducts)
}
