// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source product.go -destination ../../mock/service/mock_product.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	domain "github.com/elangreza14/superindo/internal/domain"
	params "github.com/elangreza14/superindo/internal/params"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
	isgomock struct{}
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepo) CreateProduct(ctx context.Context, req params.CreateProductRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepoMockRecorder) CreateProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepo)(nil).CreateProduct), ctx, req)
}

// ListProduct mocks base method.
func (m *MockProductRepo) ListProduct(ctx context.Context, req params.ListProductQueryParams) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProduct", ctx, req)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProduct indicates an expected call of ListProduct.
func (mr *MockProductRepoMockRecorder) ListProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProduct", reflect.TypeOf((*MockProductRepo)(nil).ListProduct), ctx, req)
}

// TotalProduct mocks base method.
func (m *MockProductRepo) TotalProduct(ctx context.Context, req params.ListProductQueryParams, withCache bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalProduct", ctx, req, withCache)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalProduct indicates an expected call of TotalProduct.
func (mr *MockProductRepoMockRecorder) TotalProduct(ctx, req, withCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalProduct", reflect.TypeOf((*MockProductRepo)(nil).TotalProduct), ctx, req, withCache)
}
