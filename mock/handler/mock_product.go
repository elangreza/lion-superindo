// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source product.go -destination ../../mock/handler/mock_product.go -package mockhandler
//

// Package mockhandler is a generated GoMock package.
package mockhandler

import (
	context "context"
	reflect "reflect"

	params "github.com/elangreza14/superindo/internal/params"
	gomock "go.uber.org/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
	isgomock struct{}
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateProduct mocks base method.
func (m *MockProductService) CreateOrUpdateProduct(ctx context.Context, req params.CreateOrUpdateProductRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateProduct", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateProduct indicates an expected call of CreateOrUpdateProduct.
func (mr *MockProductServiceMockRecorder) CreateOrUpdateProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateProduct", reflect.TypeOf((*MockProductService)(nil).CreateOrUpdateProduct), ctx, req)
}

// ListProduct mocks base method.
func (m *MockProductService) ListProduct(ctx context.Context, args params.ListProductQueryParams) (*params.ListProductResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProduct", ctx, args)
	ret0, _ := ret[0].(*params.ListProductResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProduct indicates an expected call of ListProduct.
func (mr *MockProductServiceMockRecorder) ListProduct(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProduct", reflect.TypeOf((*MockProductService)(nil).ListProduct), ctx, args)
}
